---
import { getEntry } from 'astro:content'
import { Image } from 'astro:assets'

import CaseStudy from '@/components/case-studies/CaseStudy.astro'

import dashboardAsset from '@/assets/images/case-studies/grub-market/dashboard.png'
import graphAsset from '@/assets/images/case-studies/grub-market/graph.svg'
import tag1Asset from '@/assets/images/case-studies/grub-market/tag-1.svg'
import tag2Asset from '@/assets/images/case-studies/grub-market/tag-2.svg'
import tag3Asset from '@/assets/images/case-studies/grub-market/tag-3.svg'
import stockAsset from '@/assets/images/case-studies/grub-market/stock.svg'
import rowHighlightAsset from '@/assets/images/case-studies/grub-market/row-highlight.svg'
import kpisAsset from '@/assets/images/case-studies/grub-market/kpis.svg'
import dashAsset from '@/assets/images/case-studies/grub-market/dashed-path.svg'

const entry = await getEntry('case-studies', 'grub-market')
---

<CaseStudy
  data={entry.data}
  class="bg-gradient"
  mediaAspectRatio="725/530"
  id="grub-market"
>
  <figcaption class="sr-only">
    A collection of assets related to the GrubMarket dashboard. Assets include
    an exploded out row, KPI's, inventory management, price graph, and tags
    related to logistics.
  </figcaption>
  <div data-grub-asset="dash">
    <Image src={dashAsset} alt="" />
  </div>
  <div class="asset" data-speed="1.01">
    <Image src={dashboardAsset} alt="" data-grub-asset="dashboard" />
  </div>
  <div class="asset" data-speed="0.97">
    <Image src={kpisAsset} alt="" data-grub-asset="kpis" />
  </div>
  <div class="asset" data-speed="0.94">
    <Image src={graphAsset} alt="" data-grub-asset="graph" />
  </div>

  <div class="asset" data-speed="1.02">
    <Image src={stockAsset} alt="" data-grub-asset="stock" />
  </div>
  <div class="asset" data-speed="1.03">
    <Image src={rowHighlightAsset} alt="" data-grub-asset="row-highlight" />
  </div>
  <div class="asset" data-speed=".98">
    <Image src={tag1Asset} alt="" data-grub-asset="tag" />
  </div>
  <div class="asset" data-speed=".98">
    <Image src={tag2Asset} alt="" data-grub-asset="tag" />
  </div>
  <div class="asset" data-speed=".98">
    <Image src={tag3Asset} alt="" data-grub-asset="tag" />
  </div>
</CaseStudy>

<style>
  .bg-gradient {
    background: linear-gradient(
        0deg,
        hsla(0, 0%, 100%, 0.4) 0%,
        hsla(0, 0%, 100%, 0.4) 100%
      ),
      linear-gradient(
        263deg,
        hsla(61, 100%, 87%, 0.6) 25.88%,
        hsla(62, 90%, 92%, 0) 89.65%
      ),
      linear-gradient(
        137deg,
        hsla(137, 42%, 58%, 0.79) 15.32%,
        hsl(201, 81%, 90%) 61.82%,
        hsl(12, 100%, 94%) 111.28%,
        hsl(223, 63%, 77%) 149.67%
      );
  }
</style>

<script>
  import { gsap } from 'gsap'
  import { mmFilters } from '@/scripts/app.ts'

  gsap.matchMedia().add(mmFilters, (context) => {
    let { reduceMotion } = context.conditions ?? {}

    const scaleCheck = reduceMotion ? 1 : 0.925
    const stagger = reduceMotion ? '0' : '<0.2'

    gsap
      .timeline({
        scrollTrigger: {
          trigger: '#grub-market',
          toggleActions: 'play reset play reverse',
        },
        invalidateOnRefresh: true,
        immediateRender: false,
        defaults: {
          duration: 1,
          ease: 'circ.out',
          clearProps: 'x,y',
        },
      })
      .from('[data-grub-asset="dash"]', {
        opacity: 0,
        y: reduceMotion ? 0 : 50,
        scale: scaleCheck,
      })
      .from(
        '[data-grub-asset="dashboard"]',
        {
          opacity: 0,
          y: reduceMotion ? 0 : -50,
          scale: scaleCheck,
          rotation: reduceMotion ? 0 : -6,
        },
        stagger,
      )
      .from(
        '[data-grub-asset="kpis"]',
        {
          opacity: 0,
          y: reduceMotion ? 0 : '-=50',
          x: reduceMotion ? 0 : '-=25',
          scale: scaleCheck,
        },
        stagger,
      )
      .from(
        '[data-grub-asset="stock"]',
        {
          opacity: 0,
          y: reduceMotion ? 0 : -50,
          x: reduceMotion ? 0 : 50,
          scale: scaleCheck,
        },
        stagger,
      )
      .from(
        '[data-grub-asset="row-highlight"]',
        {
          opacity: 0,
          x: reduceMotion ? 0 : 50,
          scale: scaleCheck,
        },
        stagger,
      )
      .from(
        '[data-grub-asset="tag"]',
        {
          opacity: 0,
          y: reduceMotion ? 0 : 50,
          scale: scaleCheck,
          stagger: reduceMotion ? 0 : 0.15,
        },
        stagger,
      )
      .from(
        '[data-grub-asset="graph"]',
        {
          opacity: 0,
          x: reduceMotion ? 0 : -50,
          scale: scaleCheck,
        },
        stagger,
      )
  })
</script>
