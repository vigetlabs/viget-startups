---
import { getEntry } from 'astro:content'
import { Image } from 'astro:assets'

import CaseStudy from '@/components/case-studies/CaseStudy.astro'

import behaviorAsset from '@/assets/images/case-studies/spectrum-ai/behavior.svg'
import brainAsset from '@/assets/images/case-studies/spectrum-ai/brain.svg'
import controlsAsset from '@/assets/images/case-studies/spectrum-ai/controls.svg'
import segmentedControlAsset from '@/assets/images/case-studies/spectrum-ai/segmented-control.svg'
import tracker1Asset from '@/assets/images/case-studies/spectrum-ai/tracker-1.svg'
import tracker2Asset from '@/assets/images/case-studies/spectrum-ai/tracker-2.svg'
import tracker3Asset from '@/assets/images/case-studies/spectrum-ai/tracker-3.svg'
import tracker4Asset from '@/assets/images/case-studies/spectrum-ai/tracker-4.svg'
import screenAsset from '@/assets/images/case-studies/spectrum-ai/screen.png'

const entry = await getEntry('case-studies', 'spectrum-ai')
---

<CaseStudy
  data={entry.data}
  class="odd:bg-card-gradient-1 even:bg-card-gradient-2"
  mediaAspectRatio="751/491"
  id="spectrum-ai"
>
  <div data-spectrum-asset="brain">
    <Image src={brainAsset} alt="" class="md:-translate-y-[10%]" />
  </div>
  <div data-speed="1.01">
    <Image src={screenAsset} alt="" data-spectrum-asset="screen" />
  </div>
  <div data-speed="0.95">
    <Image src={behaviorAsset} alt="" data-spectrum-asset="behavior" />
  </div>
  <div data-speed="0.97">
    <Image
      src={segmentedControlAsset}
      alt=""
      data-spectrum-asset="segmented-control"
    />
  </div>
  <div data-speed="1.02">
    <Image src={controlsAsset} alt="" data-spectrum-asset="controls" />
  </div>

  <div data-speed="0.98">
    <Image src={tracker1Asset} alt="" data-spectrum-asset="tracker" />
  </div>
  <div data-speed="0.98">
    <Image src={tracker2Asset} alt="" data-spectrum-asset="tracker" />
  </div>
  <div data-speed="0.98">
    <Image src={tracker3Asset} alt="" data-spectrum-asset="tracker" />
  </div>
  <div data-speed="0.98">
    <Image src={tracker4Asset} alt="" data-spectrum-asset="tracker" />
  </div>
</CaseStudy>

<style>
  [data-spectrum-asset] {
    opacity: 0;

    @media screen and (prefers-reduced-motion: reduce), (update: slow) {
      & {
        opacity: 1;
      }
    }
  }
</style>

<script>
  import { gsap } from 'gsap'
  import { mmFilters } from '@/scripts/app.ts'

  gsap.matchMedia().add(mmFilters, (context) => {
    let { reduceMotion } = context.conditions ?? {}

    gsap.set('[data-spectrum-asset]', { autoAlpha: 0 })

    const scaleCheck = reduceMotion ? 1 : 0.925
    const stagger = reduceMotion ? '0' : '<0.2'

    gsap
      .timeline({
        scrollTrigger: {
          trigger: '#spectrum-ai',
          toggleActions: 'play reset play reverse',
          markers: true,
        },
        invalidateOnRefresh: true,
        immediateRender: false,
        defaults: {
          duration: 1,
          ease: 'circ.out',
          clearProps: 'x,y',
        },
      })
      .fromTo(
        '[data-spectrum-asset="brain"]',
        {
          autoAlpha: 0,
          y: reduceMotion ? 0 : 50,
          scale: scaleCheck,
        },
        { autoAlpha: 1, y: 0, scale: 1 },
      )
      .fromTo(
        '[data-spectrum-asset="screen"]',
        {
          autoAlpha: 0,
          y: reduceMotion ? 0 : -50,
          scale: reduceMotion ? 1 : 0.925,
          rotation: reduceMotion ? 0 : 10,
        },
        { autoAlpha: 1, y: 0, scale: 1, rotation: 0 },
        stagger,
      )
      .fromTo(
        '[data-spectrum-asset="controls"]',
        {
          autoAlpha: 0,
          y: reduceMotion ? 0 : -50,
          x: reduceMotion ? 0 : -25,
          scale: scaleCheck,
        },
        { autoAlpha: 1, y: 0, x: 0, scale: 1 },
        stagger,
      )
      .fromTo(
        '[data-spectrum-asset="tracker"]',
        { autoAlpha: 0, y: reduceMotion ? 0 : 50, scale: scaleCheck },
        { autoAlpha: 1, y: 0, scale: 1, stagger: reduceMotion ? 0 : 0.15 },
        stagger,
      )
      .fromTo(
        '[data-spectrum-asset="behavior"]',
        { autoAlpha: 0, x: reduceMotion ? 0 : 50, scale: scaleCheck },
        { autoAlpha: 1, x: 0, scale: 1, stagger: 0.15 },
        stagger,
      )
      .fromTo(
        '[data-spectrum-asset="segmented-control"]',
        { autoAlpha: 0, y: reduceMotion ? 0 : -50, scale: scaleCheck },
        { autoAlpha: 1, y: 0, scale: 1, stagger: 0.15 },
        stagger,
      )
  })
</script>
