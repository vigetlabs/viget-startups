---
interface Props {
  /**
    Additional classes to pass to the element.
  */
  class?: string
  /**
    The speed at which the blob moves. The higher the number, the faster the blob moves.
  */
  noiseStep?: number
  /**
    The value at which the hue starts.

    Min value is `0` and max is `360`.
   */
  hueStart?: number
  /**
    The value at which the hue stops.

    Min value is `0` and max is `360`.
   */
  hueStop?: number
}

const {
  class: className,
  noiseStep = 0.002,
  hueStart = 0,
  hueStop = 360,
  ...attrs
} = Astro.props
---

<svg
  viewBox="0 0 200 200"
  class:list={[className, 'blob']}
  data-hue-start={hueStart}
  data-hue-stop={hueStop}
  data-noise-step={noiseStep}
  {...attrs}
>
  <defs>
    <linearGradient id="blob-gradient" gradientTransform="rotate(90)">
      <stop offset="0%" stop-color="var(--startColor)" class="start"></stop>
      <stop offset="100%" stop-color="var(--stopColor)" class="stop"></stop>
    </linearGradient>
    <filter id="blur">
      <feGaussianBlur in="SourceGraphic" stdDeviation="6"></feGaussianBlur>
    </filter>
  </defs>
  <path d="" fill="url('#blob-gradient')" filter="url(#blur)"></path>
</svg>

<script>
  /**
    Animated blob adapted from:
    https://dev.to/georgedoescode/tutorial-build-a-smooth-animated-blob-using-svg-js-3pne
  */
  import { spline } from '@georgedoescode/spline'
  import { createNoise2D } from 'simplex-noise'

  const blobs = document.querySelectorAll('.blob') as NodeListOf<SVGElement>

  blobs.forEach((blob, index) => {
    /******
      Get Astro Props
    ******/
    const hueStart = blob.dataset.hueStart
    const hueStop = blob.dataset.hueStop
    const setNoiseStep = blob.dataset.noiseStep

    /******
      Get Blob Elements and set unique IDs
    ******/
    const linearGradient = blob.querySelector(
      'linearGradient',
    ) as SVGLinearGradientElement
    const path = blob.querySelector('path') as SVGPathElement

    // set unique IDs for each blob
    linearGradient.id = `blob-gradient-${index}`
    path?.setAttribute('fill', `url('#${linearGradient.id}')`)

    /******
      Draw Blob Path
    ******/
    function createPoints() {
      const points = []
      // how many points do we need
      const numPoints = 6
      // used to equally space each point around the circle
      const angleStep = (Math.PI * 2) / numPoints
      // the radius of the circle
      const rad = 75

      for (let i = 1; i <= numPoints; i++) {
        // x & y coordinates of the current point
        const theta = i * angleStep

        const x = 100 + Math.cos(theta) * rad
        const y = 100 + Math.sin(theta) * rad

        // store the point
        points.push({
          x: x,
          y: y,
          /*
            we need to keep a reference to the point's original {x, y} coordinates for when we modulate the values later
          */
          originX: x,
          originY: y,
          // more on this in a moment!
          noiseOffsetX: Math.random() * 1000,
          noiseOffsetY: Math.random() * 1000,
        })
      }

      return points
    }

    function map(
      n: number,
      start1: number,
      end1: number,
      start2: number,
      end2: number,
    ) {
      return ((n - start1) / (end1 - start1)) * (end2 - start2) + start2
    }

    const noise2D = createNoise2D()

    let noiseStep = Number(setNoiseStep)

    function noise(x: number, y: number) {
      // return a value at {x point in time} {y point in time}
      return noise2D(x, y)
    }

    const points = createPoints()
    let hueNoiseOffset = 0

    /******
      Animate Blob
    ******/
    function animate() {
      /*
        generate a smooth continuous curve based on points, using Bezier curves. spline() will return an SVG path-data string. The arguments are (points, tension, close). Play with tension and check out the effect!
      */
      path?.setAttribute('d', spline(points, 1, true))

      requestAnimationFrame(animate)

      // for every point...
      for (let i = 0; i < points.length; i++) {
        const point = points[i]

        // return a pseudo random value between -1 / 1 based on this point's current x, y positions in "time"
        const nX = noise(point.noiseOffsetX, point.noiseOffsetX)
        const nY = noise(point.noiseOffsetY, point.noiseOffsetY)
        // map this noise value to a new value, somewhere between it's original location -20 and it's original location + 20
        const x = map(nX, -1, 1, point.originX - 20, point.originX + 20)
        const y = map(nY, -1, 1, point.originY - 20, point.originY + 20)

        // update the point's current coordinates
        point.x = x
        point.y = y

        // progress the point's x, y values through "time"
        point.noiseOffsetX += noiseStep
        point.noiseOffsetY += noiseStep

        // Adjust gradient hue
        hueNoiseOffset += noiseStep / 6

        const hueNoise = noise(hueNoiseOffset, hueNoiseOffset)
        const hue = map(hueNoise, -1, 1, Number(hueStart), Number(hueStop))

        blob.style.setProperty('--startColor', `hsl(${hue}, 100%, 75%)`)
        blob.style.setProperty('--stopColor', `hsl(${hue + 60}, 100%, 75%)`)
      }
    }

    animate()
  })
</script>
