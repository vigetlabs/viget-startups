---
import InlineSvg from '@/components/InlineSvg.astro'

interface Props {
  /**
    The label of the button.
  */
  label?: string
  /**
    The URL to link to if the button is an anchor.
  */
  href?: string
  /**
    The variant style of the button.
  */
  variant?: 'primary' | 'secondary'
  /**
    The size of the button.
  */
  size?: 'sm' | 'md' | 'lg'
  /**
    Whether the button colors should be inverted.
  */
  inverted?: boolean
  /**
    Additional classes to pass to the element.
  */
  class?: string
  /**
    Button type (if applicable)
  */
  type?: 'button' | 'submit' | undefined
}

const {
  label = '',
  href = undefined,
  variant = 'primary',
  size = 'md',
  inverted = false,
  type = href ? undefined : 'button',
  ...attrs
} = Astro.props

const Element = href ? 'a' : 'button'
---

<Element
  class:list={[
    'btn',
    {
      'btn--primary': variant === 'primary',
    },
    { 'btn--secondary': variant === 'secondary' },
    { 'btn--sm': size === 'sm' },
    { 'btn--md': size === 'md' },
    { 'btn--lg': size === 'lg' },
    { 'btn--inverted': inverted },
  ]}
  type={type}
  href={href}
  {...attrs}
>
  {
    variant === 'primary' ? (
      <span class="btn__letters">{label}</span>
    ) : (
      <>
        {label}
        <InlineSvg name="arrow-right" class="inline-flex shrink-0" />
      </>
    )
  }
</Element>

<style is:global>
  .btn {
    @apply inline-flex items-center gap-8 font-medium leading-none tracking-wider focus-visible:outline-offset-2;
  }

  .btn--primary {
    @apply overflow-hidden rounded-full px-24;

    &:not(.btn--inverted) {
      @apply bg-black text-white;
    }

    &.btn--inverted {
      @apply bg-white text-black;
    }

    & .btn__letters {
      @apply flex items-center overflow-hidden;
      height: var(--btn-text-size);
      text-shadow: 0 calc(var(--btn-text-size) + 2px) 0;

      & span {
        line-height: 0.5;
        backface-visibility: hidden;
        transition: transform 0.3s ease;
        transform: translateY(0) translateZ(0);
        white-space: pre;
        transition-delay: var(--letter-delay, 0);
      }
    }

    &:hover .btn__letters span,
    &:focus-visible .btn__letters span {
      transform: translateY(calc((var(--btn-text-size) + 2px) * -1))
        translateZ(0);
    }
  }

  .btn--secondary {
    @apply bg-transparent;

    &:not(.btn--inverted) {
      @apply text-black;
    }

    &.btn--inverted {
      @apply text-white;
    }

    & svg {
      transition: transform 0.3s ease;
      flex-shrink: 0;
    }

    &:hover,
    &:focus-visible {
      & svg {
        transform: translateX(6px);
      }
    }
  }

  .btn--sm {
    @apply h-28;

    &:is(.btn--primary) {
      @apply text-xs;
      --btn-text-size: 14px; /* used for text shadow offset */
    }

    &:is(.btn--secondary) {
      @apply text-sm;
    }

    & svg {
      @apply w-12;
    }
  }

  .btn--md,
  .btn--lg {
    @apply text-md;

    &:is(.btn--primary) {
      --btn-text-size: 20px; /* used for text shadow offset */
    }

    & svg {
      @apply w-16;
    }
  }

  .btn--md {
    @apply h-48;
  }

  .btn--lg {
    @apply h-56;
  }
</style>

<script>
  // Get all primary button labels
  const primaryBtnLabels = document.querySelectorAll(
    '.btn--primary .btn__letters',
  )

  // Split primary button label letters into spans
  Promise.all(
    Array.from(primaryBtnLabels).map(
      (label) =>
        new Promise<void>((resolve) => {
          label.innerHTML = `<span>${label.textContent
            ?.trim()
            .split('')
            .join('</span><span>')}</span>`
          resolve()
        }),
    ),
  ).then(() => {
    // Add delay to each letter within each primary button label
    primaryBtnLabels.forEach((label) => {
      const labelLetter = label.querySelectorAll('span')
      labelLetter.forEach((letter, i) =>
        (letter as HTMLElement).style.setProperty(
          '--letter-delay',
          `${i / 80}s`,
        ),
      )
    })
  })
</script>
